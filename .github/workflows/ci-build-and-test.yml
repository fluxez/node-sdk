name: CI Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout source repository
      uses: actions/checkout@v3
      with:
        path: source
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install dependencies
      working-directory: source
      run: npm ci
    
    - name: Build SDK
      working-directory: source
      run: npm run build
    
    - name: Run tests
      working-directory: source
      run: npm test || true  # Continue even if tests fail
    
    - name: Patch URLs for production
      working-directory: source
      run: |
        chmod +x scripts/patch-urls-for-public.sh
        ./scripts/patch-urls-for-public.sh
    
    - name: Checkout public repository
      uses: actions/checkout@v3
      with:
        repository: fluxez/fluxez-node-sdk
        token: ${{ secrets.PUBLIC_REPO_TOKEN }}
        path: public
    
    - name: Copy files to public repository
      run: |
        # Remove old files except .git
        find public -maxdepth 1 -mindepth 1 ! -name '.git' -exec rm -rf {} +
        
        # Copy all files except sensitive ones
        rsync -av \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='.env*' \
          --exclude='*credentials*' \
          --exclude='*.local' \
          --exclude='node_modules' \
          --exclude='coverage' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          source/ public/
    
    - name: Commit and push to public repository
      working-directory: public
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Get version from package.json
        VERSION=$(node -p "require('./package.json').version")
        
        # Get short commit hash from source
        SOURCE_COMMIT=$(cd ../source && git rev-parse --short HEAD)
        
        git add -A
        
        # Check if there are changes
        if git diff --cached --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git commit -m "Release v${VERSION} from ${SOURCE_COMMIT}
        
        Auto-generated from private repository
        Source commit: https://github.com/fluxez/node-sdk/commit/${SOURCE_COMMIT}"
        
        git push origin main
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      working-directory: public
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_TOKEN }}
      run: |
        VERSION=$(node -p "require('./package.json').version")
        
        # Check if release already exists
        if gh release view "v${VERSION}" &>/dev/null; then
          echo "Release v${VERSION} already exists"
          exit 0
        fi
        
        # Create release
        gh release create "v${VERSION}" \
          --title "v${VERSION}" \
          --notes "See [CHANGELOG.md](https://github.com/fluxez/fluxez-node-sdk/blob/main/CHANGELOG.md) for details" \
          --target main